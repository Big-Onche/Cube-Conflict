////////////////////////////////////////////////
//
// post effects
//
////////////////////////////////////////////////

fsvs = [result [
    attribute vec4 vvertex;
    @(screentexcoord 0)
    varying vec2 texcoord0;
    @arg2
    void main(void)
    {
        gl_Position = vvertex;   // woohoo, no mvp :) 
        texcoord0 = vtexcoord0; 
        @arg1
    }
]]

fsps = [result [
    uniform sampler2DRect tex0; 
    varying vec2 texcoord0;
    fragdata(0) vec4 fragcolor;
    @arg2
    void main(void)
    {
        vec4 color = texture2DRect(tex0, texcoord0);
        @arg1
    }
]]

fsvs4 = [
    fsvs [
        texcoord1 = vtexcoord0 + vec2(-1.5, -1.5);
        texcoord2 = vtexcoord0 + vec2( 1.5, -1.5);
        texcoord3 = vtexcoord0 + vec2(-1.5,  1.5);
        texcoord4 = vtexcoord0 + vec2( 1.5,  1.5);
        @arg1
    ] [
        varying vec2 texcoord1, texcoord2, texcoord3, texcoord4;
    ]
]

fsps4 = [
    fsps [
        vec4 s00 = texture2DRect(tex0, texcoord1);
        vec4 s02 = texture2DRect(tex0, texcoord2);
        vec4 s20 = texture2DRect(tex0, texcoord3);
        vec4 s22 = texture2DRect(tex0, texcoord4);
        @arg1
    ] [
        varying vec2 texcoord1, texcoord2, texcoord3, texcoord4;
    ]
]

// some simple ones that just do an effect on the RGB value...

lazyshader 0 "invert" (fsvs) (fsps [fragcolor = 1.0 - color;])
lazyshader 0 "gbr"    (fsvs) (fsps [fragcolor = color.yzxw;])
lazyshader 0 "bw"     (fsvs) (fsps [fragcolor = vec4(dot(color.xyz, vec3(0.333)));])

// sobel

lazyshader 0 "sobel" (fsvs4) (fsps4 [
    vec4 t = s00 + s20 - s02 - s22;
    vec4 u = s00 + s02 - s20 - s22;
    fragcolor = (color*1.2) + t*t + u*u;
])

// rotoscope

lazyshader 0 "rotoscope" [
    attribute vec4 vvertex;
    @(screentexcoord 0)
    uniform vec4 params;
    varying vec2 t11, t00, t12, t01, t20, t02, t21, t10, t22;
    void main(void)
    {
        gl_Position = vvertex;
        t11 = vtexcoord0;
        t00 = vec2(-1.0, -1.0)*params.x + vtexcoord0;
        t12 = vec2( 0.0,  1.0)*params.x + vtexcoord0;
        t01 = vec2(-1.0,  0.0)*params.x + vtexcoord0;
        t20 = vec2( 1.0, -1.0)*params.x + vtexcoord0;
        t02 = vec2(-1.0,  1.0)*params.x + vtexcoord0;
        t21 = vec2( 1.0,  0.0)*params.x + vtexcoord0;
        t10 = vec2( 0.0, -1.0)*params.x + vtexcoord0;
        t22 = vec2( 1.0,  1.0)*params.x + vtexcoord0;
    }
] [
    uniform sampler2DRect tex0; 
    varying vec2 t11, t00, t12, t01, t20, t02, t21, t10, t22;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 c00 = texture2DRect(tex0, t00);
        vec4 c01 = texture2DRect(tex0, t01);
        vec4 c02 = texture2DRect(tex0, t02);
        vec4 c10 = texture2DRect(tex0, t10);
        vec4 c11 = texture2DRect(tex0, t11);
        vec4 c12 = texture2DRect(tex0, t12);
        vec4 c20 = texture2DRect(tex0, t20);
        vec4 c21 = texture2DRect(tex0, t21);
        vec4 c22 = texture2DRect(tex0, t22);

        vec4 diag1 = c00 - c22;
        vec4 diag2 = c02 - c20;
        vec4 xedge = (c01 - c21)*2.0 + diag1 + diag2;
        vec4 yedge = (c10 - c12)*2.0 + diag1 - diag2;
        xedge *= xedge;
        yedge *= yedge;

        vec4 xyedge = xedge + yedge;
        float sobel = step(max(xyedge.x, max(xyedge.y, xyedge.z)), 0.1);

        float hue = dot(c11.xyz, vec3(1.0));
        c11 /= hue;
        vec3 cc = step(vec3(0.2, 0.8, 1.5), vec3(hue));
        c11 *= dot(cc, vec3(0.5, 0.5, 1.5)); 

        fragcolor = c11 * max(cc.z, sobel);

    }
]

blur3shader = [
    lazyshader 0 $arg1 [
        attribute vec4 vvertex;
        @(screentexcoord 0)
        varying vec2 texcoord0, texcoord1;
        void main(void)
        {
            gl_Position = vvertex;
            texcoord0 = vtexcoord0 + vec2(@(? $arg2 -0.5 0.0), @(? $arg3 -0.5 0.0));
            texcoord1 = vtexcoord0 + vec2(@(? $arg2  0.5 0.0), @(? $arg3  0.5 0.0));
        }
    ] [
        uniform sampler2DRect tex0; 
        varying vec2 texcoord0, texcoord1;
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            fragcolor = 0.5*(texture2DRect(tex0, texcoord0) + texture2DRect(tex0, texcoord1));
        }
    ]
]
blur3shader hblur3 1 0
blur3shader vblur3 0 1

blur5shader = [
    lazyshader 0 $arg1 [
        attribute vec4 vvertex;
        @(screentexcoord 0)
        varying vec2 texcoord0, texcoord1, texcoord2;
        void main(void)
        {
            gl_Position = vvertex;
            texcoord0 = vtexcoord0;
            texcoord1 = vtexcoord0 + vec2(@(? $arg2 -1.333 0.0), @(? $arg3 -1.333 0.0));
            texcoord2 = vtexcoord0 + vec2(@(? $arg2  1.333 0.0), @(? $arg3  1.333 0.0));
        }
    ] [
        uniform sampler2DRect tex0; 
        varying vec2 texcoord0, texcoord1, texcoord2;
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            fragcolor = 0.4*texture2DRect(tex0, texcoord0) + 0.3*(texture2DRect(tex0, texcoord1) + texture2DRect(tex0, texcoord2));
        }
    ]
]
blur5shader hblur5 1 0
blur5shader vblur5 0 1

rotoscope = [
    clearpostfx
    if (>= $numargs 1) [addpostfx rotoscope 0 0 0 $arg1]
    if (>= $numargs 2) [
        if (= $arg2 1) [addpostfx hblur3; addpostfx vblur3]
        if (= $arg2 2) [addpostfx hblur5; addpostfx vblur5]
    ]
]

lazyshader 0 "radialblur" (fsvs) (fsps [
	vec2 tomid = viewsize.xy / 2 - texcoord0.xy;
	float square = length(tomid) / mix(viewsize.x, viewsize.y, 0.5);
	tomid = normalize(tomid) * square * square;
	vec4 totalColor = vec4(0.0);
	float totalSamples = 0.0;
    
	float samples = 1.0 / params.x;
    
	for(float multi = 0.0; multi < 1.0; multi += samples)
	{
		totalColor += texture2DRect(tex0, texcoord0.xy + tomid * params.y * multi);
		totalSamples += 1.0;
	}

	fragcolor = totalColor / totalSamples;
] [
	uniform vec4 params; // Params: x - blur steps, y - blur size
	uniform vec4 viewsize;
])

lazyshader 0 "telescopicsight" (fsvs) (fsps [
    // Calculate distance from the center of the screen to the current fragment
    float scopeSize = viewsize.y * 0.45;
    vec2 center = viewsize.xy / 2.0;
    vec2 tomid = texcoord0.xy - center;
    float radius = max(abs(tomid.x), abs(tomid.y)) / scopeSize;

    // Calculate edge weight for chromatic aberration
    float edgeWeight = smoothstep(0.2, 1.0, radius);
    float chromaticStrength = params.y * pow(edgeWeight, 2.0);

    // Adjust chromatic aberration scaling for better alignment with distortion
    vec2 chromaticOffset = vec2(1.0 + chromaticStrength * radius);

    // Apply barrel and pincushion distortion using cubic distortion model
    float distortionFactor = 1.0 + params.x * radius * radius;

    // Adjusted distorted coordinates for chromatic aberration
    vec2 distortedCoordsR = (tomid * (distortionFactor * chromaticOffset.x)) + center;
    vec2 distortedCoordsG = (tomid * distortionFactor) + center;
    vec2 distortedCoordsB = (tomid * (distortionFactor * chromaticOffset.y)) + center;

    // Calculate blur amount based on distance from center and edge weight
    float blurAmount = radius * edgeWeight * 5.0;

    // Sample the texture for each color channel with blur
    vec4 colorR = sampleBlurred(tex0, distortedCoordsR, blurAmount * 0.9); // Reduce blur variance
    vec4 colorG = sampleBlurred(tex0, distortedCoordsG, blurAmount * 0.9);
    vec4 colorB = sampleBlurred(tex0, distortedCoordsB, blurAmount * 0.9);

    // Lerp between original and chromatic colors based on edge weight
    vec4 originalColor = texture2DRect(tex0, distortedCoordsG);
    vec4 chromaticColor = vec4(colorR.r, colorG.g, colorB.b, 1.0);
    vec4 totalColor = mix(originalColor, chromaticColor, edgeWeight);
    
    // Convert hex color from params.w to 24-bit RGB
    vec3 filterColor;
    filterColor.r = floor(mod(params.w / 65536, 256)) / 255;
    filterColor.g = floor(mod(params.w / 256, 256)) / 255;
    filterColor.b = floor(mod(params.w, 256)) / 255;
    
    // Apply scope color filter (blend with original color)
    totalColor.rgb = mix(totalColor.rgb, totalColor.rgb * filterColor, 0.3 * params.z); 
    
    // Add scope crosshair
    vec2 centerdist = abs(texcoord0.xy - center);
    
    bool isHorizontalLine = centerdist.y < 1.0 && centerdist.x < scopeSize * params.z;
    bool isVerticalLine = centerdist.x < 1.0 && centerdist.y < scopeSize * params.z;
    
    if (isHorizontalLine || isVerticalLine) {
        totalColor.rgb = mix(totalColor.rgb, vec3(1.0), 0.2 * params.z);
    }
    
    // Apply scope borders
    float borderRadius = pow(radius, 1.5);
    float border = smoothstep(0.8, 1.0, borderRadius);
    vec4 vignettedColor = totalColor * pow(1.0 - border, 1.2);

    fragcolor = mix(totalColor, vignettedColor, params.z);
] [
    uniform vec4 params; // x: distortion intensity, y: chromatic aberration intensity, z: aiming progression (0-1), w: scope color (hex)
    uniform vec4 viewsize;

    vec4 sampleBlurred(sampler2DRect tex, vec2 coords, float blur) {
        vec4 color = vec4(0.0);
        float total = 0.0;

        // 9-tap gaussian blur
        for(float x = -2.0; x <= 2.0; x += 1.0) {
            for(float y = -2.0; y <= 2.0; y += 1.0) {
                vec2 offset = vec2(x, y) * blur;
                float weight = exp(-(x*x + y*y) / 4.0);
                color += texture2DRect(tex, coords + offset) * weight;
                total += weight;
            }
        }

        return color / total;
    }
])

// main filter used in the game

lazyshader 0 "mainfilter" (fsvs) (fsps [
    switch (int(params.x)) {
        case 0: // normal filter
        {
            vec3 rgb = color.rgb;
            
            // calculate luminance
            float luminance = 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b;
            vec3 grayscale = vec3(luminance, luminance, luminance);

            rgb = grayscale + 1.25 * (rgb - grayscale); // increase saturation

            // enhance blues and greens
            rgb.b = rgb.b * 1.15;
            rgb.g = rgb.g * 1.15;
            
            rgb *= vec3(0.9); // darkening effect
            fragcolor = vec4(rgb, color.a); // keeping original alpha
            break;
        }
        case 1: // death screen filter
        {
            vec3 grayscale = vec3(dot(color.rgb, vec3(0.299, 0.587, 0.114)));
            grayscale = ((grayscale - 0.5) * max(1.25, 0.0)) + 0.5; // Contrast adjustment
            vec3 desaturatedColor = mix(color.rgb, grayscale, 0.75); //desaturation
            fragcolor = vec4(desaturatedColor, color.a);
            break;
        }
        case 2: // protanopia filter
        {
            vec3 rgb = color.rgb;
            
            mat3 protanopia = mat3(
                0.170, 0.000, 0.000,
                0.330, 0.900, 0.000,
                -0.100, 0.300, 1.000
            );
            
            rgb = protanopia * rgb;
            
            float contrast = 1.35;
            float brightness = 0.1;

            rgb = contrast * (rgb - 0.5) + 0.5 + brightness;
            rgb = clamp(rgb, 0.0, 1.0);
            
            fragcolor = vec4(rgb, color.a);
            break;
        }
        case 3: // deuteranopia filter
        {
            vec3 rgb = color.rgb;
            
            mat3 deuteranopia = mat3(
                0.625, 0.375, 0.000,
                0.700, 0.300, 0.100, 
                0.000, 0.300, 1.000
            );
                
            rgb = deuteranopia * rgb;
            
            float contrast = 1.25;
            float brightness = 0.05;

            rgb = contrast * (rgb - 0.5) + 0.5 + brightness;
            rgb = clamp(rgb, 0.0, 1.0);
            
            fragcolor = vec4(rgb, color.a);
            break;
        }
        case 4: // tritanopia filter
        {
        	vec3 rgb = color.rgb;
	
            mat3 tritanopia = mat3(
                1.000, -0.395, 0.395,
                0.000, 1.000, 0.000,
                -0.500, 0.500, 1.000
            );
                
            rgb = tritanopia * rgb;
            
            float contrast = 1.3;
            float brightness = 0.1;

            rgb = contrast * (rgb - 0.5) + 0.5 + brightness;
            rgb = clamp(rgb, 0.0, 1.0);
            
            fragcolor = vec4(rgb, color.a);
            break;
        }
        case 5: // achromatopsia
        {
            vec3 rgb = color.rgb;
            
            float grayscale = dot(rgb, vec3(0.299, 0.587, 0.114));

            float contrast = 1.25;
            float brightness = 0.1; 

            grayscale = contrast * (grayscale - 0.5) + 0.5 + brightness;
            grayscale = clamp(grayscale, 0.0, 1.0);

            fragcolor = vec4(vec3(grayscale), color.a);
            break;
        }
    }
] [
    uniform vec4 params; // x: filter type
])
